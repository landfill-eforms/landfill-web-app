package org.lacitysan.landfill.server.persistence.enums;

import org.lacitysan.landfill.server.json.LandfillEnumDeserializer;

import com.fasterxml.jackson.annotation.JsonCreator;

/**
 * This file was automatically generated by 'user-permission-enum-gen'.
 * https://github.com/landfill-eforms/landfill-tools/tree/master/user-permission-enum-gen
 *
 * Data was parsed from the Excel sheet located at https://docs.google.com/spreadsheets/d/1qD6SvrIjW-FTFVWyO6cMKr4DaV_laGqgzV4Im_wNMWc
 */
public enum UserPermission {

	/** Admin */
	ADMIN ("Admin", "Admin"),

	/** User can view existing users. */
	VIEW_USERS ("User can view existing users.", Category.USERS, "View List", "User can view existing users."),

	/** User can create new users. */
	CREATE_USERS ("User can create new users.", Category.USERS, "Create", "User can create new users."),

	/** User can reactivate other non-admin user accounts. */
	ENABLE_USERS ("User can reactivate other non-admin user accounts.", Category.USERS, "Enable Account", "User can reactivate other non-admin user accounts."),

	/** User can deactivate other non-admin user accounts. */
	DISABLE_USERS ("User can deactivate other non-admin user accounts.", Category.USERS, "Disable Account", "User can deactivate other non-admin user accounts."),

	/** User can reset the passwords of other non-admin users. */
	RESET_USER_PASSWORDS ("User can reset the passwords of other non-admin users.", Category.USERS, "Reset Password", "User can reset the passwords of other non-admin users."),

	/** User can reset the usernames of other non-admin users. */
	RESET_USER_USERNAMES ("User can reset the usernames of other non-admin users.", Category.USERS, "Reset Username", "User can reset the usernames of other non-admin users."),

	/** User can edit the profiles of other non-admin users. */
	EDIT_USER_PROFILES ("User can edit the profiles of other non-admin users.", Category.USERS, "Edit Profile", "User can edit the profiles of other non-admin users."),

	/** User can change the employee ID associated with non-admin user accounts. */
	ASSIGN_EMPLOYEE_ID ("User can change the employee ID associated with non-admin user accounts.", Category.USERS, "Assign Employee ID", "User can change the employee ID associated with non-admin user accounts."),

	/** User can assign user groups to non-admin users. */
	ASSIGN_USER_GROUPS ("User can assign user groups to non-admin users.", Category.USERS, "Assign Groups", "User can assign user groups to non-admin users."),

	/** User can view existing user groups. */
	VIEW_USER_GROUPS ("User can view existing user groups.", Category.USER_GROUPS, "View List", "User can view existing user groups."),

	/** User can create new user groups. */
	CREATE_USER_GROUPS ("User can create new user groups.", Category.USER_GROUPS, "Create", "User can create new user groups."),

	/** User can delete existing user groups. */
	DELETE_USER_GROUPS ("User can delete existing user groups.", Category.USER_GROUPS, "Delete", "User can delete existing user groups."),

	/** User can add/remove roles and rename existing user groups. */
	EDIT_USER_GROUPS ("User can add/remove roles and rename existing user groups.", Category.USER_GROUPS, "Edit", "User can add/remove roles and rename existing user groups."),

	/** User can view existing equipment. */
	VIEW_INSTRUMENTS ("User can view existing equipment.", Category.EQUIPMENT, "View List", "User can view existing equipment."),

	/** User can add new equipment entries. */
	CREATE_INSTRUMENTS ("User can add new equipment entries.", Category.EQUIPMENT, "Create", "User can add new equipment entries."),

	/** User can edit existing equipment entries. */
	EDIT_INSTRUMENTS ("User can edit existing equipment entries.", Category.EQUIPMENT, "Edit", "User can edit existing equipment entries."),

	/** User can delete existing equipment entries. */
	DELETE_INSTRUMENTS ("User can delete existing equipment entries.", Category.EQUIPMENT, "Delete", "User can delete existing equipment entries."),

	/** User can view existing equipment types. */
	VIEW_INSTRUMENT_TYPES ("User can view existing equipment types.", Category.EQUIPMENT_TYPE, "View List", "User can view existing equipment types."),

	/** User can add new equipment types. */
	CREATE_INSTRUMENT_TYPES ("User can add new equipment types.", Category.EQUIPMENT_TYPE, "Create", "User can add new equipment types."),

	/** User can edit existing equipment types. */
	EDIT_INSTRUMENT_TYPES ("User can edit existing equipment types.", Category.EQUIPMENT_TYPE, "Edit", "User can edit existing equipment types."),

	/** User can delete existing equipment types. */
	DELETE_INSTRUMENT_TYPES ("User can delete existing equipment types.", Category.EQUIPMENT_TYPE, "Delete", "User can delete existing equipment types."),

	/** User can upload data form the mobile application. */
	UPLOAD_MOBILE_DATA ("User can upload data form the mobile application.", Category.MOBILE_APP_SYNC, "Upload", "User can upload data form the mobile application."),

	/** User can download data for transfer to the mobile applications. */
	DOWNLOAD_MOBILE_DATA ("User can download data for transfer to the mobile applications.", Category.MOBILE_APP_SYNC, "Download", "User can download data for transfer to the mobile applications."),

	/** User can view existing unverified data sets. */
	VIEW_UNVERIFIED_DATA_SETS ("User can view existing unverified data sets.", Category.UNVERIFIED_DATA, "View List", "User can view existing unverified data sets."),

	/** User can view the details of an unverified data set. <i>Subject to change</i> */
	VIEW_UNVERIFIED_DATA_SET ("User can view the details of an unverified data set.", Category.UNVERIFIED_DATA, "View Sets", "User can view the details of an unverified data set."),

	/** User can edit and save the details of an unverified data set. <i>Subject to change</i> */
	EDIT_UNVERIFIED_DATA_SET ("User can edit and save the details of an unverified data set.", Category.UNVERIFIED_DATA, "Edit Sets", "User can edit and save the details of an unverified data set."),

	/** User can delete entire unverified data sets. <i>Subject to change</i> */
	DELETE_UNVERIFIED_DATA_SET ("User can delete entire unverified data sets.", Category.UNVERIFIED_DATA, "Delete Sets", "User can delete entire unverified data sets."),

	/** User can delete individual data entries in an unverified data set. <i>Subject to change</i> */
	DELETE_UNVERIFIED_DATA ("User can delete individual data entries in an unverified data set.", Category.UNVERIFIED_DATA, "Delete Data", "User can delete individual data entries in an unverified data set."),

	/** User can commit unverified data sets. <i>Subject to change</i> */
	COMMIT_UNVERIFIED_DATA_SET ("User can commit unverified data sets.", Category.UNVERIFIED_DATA, "Commit Set", "User can commit unverified data sets."),

	/** User can generate reports. <i>Do we need separate permissions for each type of reports?</i> */
	GENERATE_REPORTS ("User can generate reports.", Category.REPORTS, "Generate", "User can generate reports."),

	/**  */
	EMAIL_GENERATED_REPORT ("", Category.REPORTS, "", ""),

	/** User can view list of verified data */
	VIEW_VERIFIED_DATA ("User can view list of verified data", Category.WEB_APP, "View List", "User can view list of verified data"),

	/** User can find data by specific fields */
	QUERY_VERIFIED_DATA_SET ("User can find data by specific fields", Category.WEB_APP, "Query List", "User can find data by specific fields");

	private String name;
	private String category;
	private String categoryAction;
	private String description;

	private UserPermission(String name, String description) {
		this.name = name;
		this.description = description;
	}

	private UserPermission(String name, String category, String categoryAction, String description) {
		this.name = name;
		this.category = category;
		this.categoryAction = categoryAction;
		this.description = description;
	}

	public String getName() {
		return name;
	}

	public String getCategory() {
		return category;
	}

	public String getCategoryAction() {
		return categoryAction;
	}

	public String getDescription() {
		return description;
	}

	@JsonCreator
	public static UserPermission deserialize(Object object) {
		return LandfillEnumDeserializer.deserialize(UserPermission.class, object);
	}

	private static class Category {
		protected final static String EQUIPMENT = "Equipment";
		protected final static String EQUIPMENT_TYPE = "Equipment Type";
		protected final static String MOBILE_APP_SYNC = "Mobile App Sync";
		protected final static String REPORTS = "Reports";
		protected final static String UNVERIFIED_DATA = "Unverified Data";
		protected final static String USERS = "Users";
		protected final static String USER_GROUPS = "User Groups";
		protected final static String WEB_APP = "Web App";
	}

}